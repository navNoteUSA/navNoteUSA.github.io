name: Deploy to AWS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Set up environment variables
      run: |
        echo "TIMESTAMP=$(date +%s)" >> $GITHUB_ENV
        echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          897722675510.dkr.ecr.us-east-1.amazonaws.com/navnote-frontend:latest
          897722675510.dkr.ecr.us-east-1.amazonaws.com/navnote-frontend:${{ env.COMMIT_HASH }}
        build-args: |
          VITE_API_URL=https://api.navnote.net/api
          NODE_ENV=production
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push backend image
      uses: docker/build-push-action@v4
      with:
        context: ./navnote_backend
        push: true
        tags: |
          897722675510.dkr.ecr.us-east-1.amazonaws.com/navnote-backend:latest
          897722675510.dkr.ecr.us-east-1.amazonaws.com/navnote-backend:${{ env.COMMIT_HASH }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Create or update CloudFormation stack
      run: |
        # Check if stack exists
        if aws cloudformation describe-stacks --stack-name NavNoteSimpleStack &> /dev/null; then
          # Update existing stack
          echo "Updating existing CloudFormation stack..."
          aws cloudformation update-stack \
            --stack-name NavNoteSimpleStack \
            --template-body file://cloudformation-simple.yaml \
            --parameters ParameterKey=ImageTagFrontend,ParameterValue=${{ env.COMMIT_HASH }} \
                         ParameterKey=ImageTagBackend,ParameterValue=${{ env.COMMIT_HASH }} \
            --capabilities CAPABILITY_NAMED_IAM || true
        else
          # Create new stack
          echo "Creating new CloudFormation stack..."
          aws cloudformation create-stack \
            --stack-name NavNoteSimpleStack \
            --template-body file://cloudformation-simple.yaml \
            --parameters ParameterKey=ImageTagFrontend,ParameterValue=${{ env.COMMIT_HASH }} \
                         ParameterKey=ImageTagBackend,ParameterValue=${{ env.COMMIT_HASH }} \
            --capabilities CAPABILITY_NAMED_IAM
          
          # Wait for stack creation to complete
          aws cloudformation wait stack-create-complete --stack-name NavNoteSimpleStack
        fi
        
        # Get outputs from stack
        INSTANCE_ID=$(aws cloudformation describe-stacks --stack-name NavNoteSimpleStack --query "Stacks[0].Outputs[?OutputKey=='EC2InstanceId'].OutputValue" --output text)
        PUBLIC_IP=$(aws cloudformation describe-stacks --stack-name NavNoteSimpleStack --query "Stacks[0].Outputs[?OutputKey=='PublicIP'].OutputValue" --output text)
        
        echo "EC2 Instance ID: $INSTANCE_ID"
        echo "Public IP: $PUBLIC_IP"
        
        # Wait for instance to be ready for SSM commands
        echo "Waiting for instance to be ready for SSM commands..."
        sleep 60
        
        # Use SSM to deploy the latest images
        aws ssm send-command \
          --instance-ids $INSTANCE_ID \
          --document-name "AWS-RunShellScript" \
          --parameters commands=[
            "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 897722675510.dkr.ecr.us-east-1.amazonaws.com",
            "cd /home/ec2-user",
            "docker-compose down",
            "docker system prune -af",
            "docker-compose pull",
            "docker-compose up -d"
          ]
        
        echo "Deployment completed successfully!"
        echo "Your application should be available at: http://$PUBLIC_IP"